////////////////////////////////////////////////////////////////////////////////
//
//  TYPHOON FRAMEWORK
//  Copyright 2013, Jasper Blues & Contributors
//  All Rights Reserved.
//
//  NOTICE: The authors permit you to use, modify, and distribute this file
//  in accordance with the terms of the license agreement accompanying it.
//
////////////////////////////////////////////////////////////////////////////////

#import "TyphoonDefinition.h"

@class TyphoonConfigPostProcessor;
@protocol TyphoonResource;

/**
 Declares short-hand definition factory methods for infrastructure components.
 */
@interface TyphoonDefinition (Infrastructure)

@property(nonatomic, strong) TyphoonRuntimeArguments *currentRuntimeArguments;

/**
* The key of the component. A key is useful when multiple configuration of the same class or protocol are desired - for example
* MasterCardPaymentClient and VisaPaymentClient.
*
* If using the TyphoonBlockComponentFactory style of assembly, the key is automatically generated based on the selector name of the
* component, thus avoiding "magic strings" and providing better integration with IDE refactoring tools.
*/
@property(nonatomic, strong) NSString *key;

/**
* Describes the initializer, ie the selector and arguments that will be used to instantiate this component.
*
* An initializer can be an instance method, a class method, or even a reference to another component's method (see factory property).
*
* If no explicit initializer has been set, returns a default initializer representing the init method.
*
* @see factory
*/
@property(nonatomic, strong) TyphoonMethod *initializer;

/**
* Returns true if this is a default initializer generated by Typhoon. A manually specified initializer will return false, even if the
* selector is @selector(init)
*/
@property(nonatomic, getter = isInitializerGenerated) BOOL initializerGenerated;

/**
* Returns a definition with the given class and key. In the block-style assembly, keys are auto-generated, however infrastructure components
* may specify their own key.
*/
+ (instancetype)withClass:(Class)clazz key:(NSString *)key;

/**
Factory method for a TyphoonConfigPostProcessor.
@param fileName The config filename to load. File should be placed in main bundle
@return a definition.
*/
+ (instancetype)configDefinitionWithName:(NSString *)fileName;

/**
Factory method for a TyphoonConfigPostProcessor.
@param filePath The path to config file to load.
@return a definition.
*/
+ (instancetype)configDefinitionWithPath:(NSString *)filePath;


- (id)initWithClass:(Class)clazz key:(NSString *)key;

- (id)initWithClass:(Class)clazz key:(NSString *)key factoryComponent:(NSString *)factoryComponent;


- (BOOL)matchesAutoInjectionWithType:(id)classOrProtocol includeSubclasses:(BOOL)includeSubclasses;

@end
